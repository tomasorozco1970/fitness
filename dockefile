# Stage 1: Build the React application
# This stage uses a Node.js environment to install dependencies and run the build script.
FROM node:18-alpine AS builder
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock) to leverage Docker layer caching.
COPY package*.json ./

# Install dependencies. 'npm ci' is recommended for CI/CD environments as it's faster and stricter.
RUN npm ci

# Copy the rest of your application source code into the container.
COPY . .

# ARG to receive the API_KEY from the 'docker build' command (which will be run by Cloud Build).
ARG API_KEY_FOR_BUILD

# Set the received ARG as an environment variable that the 'npm run build' script can access.
# Our package.json script uses this variable ($API_KEY_FOR_BUILD).
ENV API_KEY_FOR_BUILD=${API_KEY_FOR_BUILD}

# Run the build script defined in package.json.
# This will create a 'dist' folder with the compiled static assets.
RUN npm run build

# Stage 2: Serve the static files using a lightweight Nginx web server.
# This results in a smaller, more secure final container image.
FROM nginx:1.25-alpine
WORKDIR /usr/share/nginx/html

# Remove the default Nginx welcome page.
RUN rm -rf ./*

# Copy the compiled static assets from the 'builder' stage's "dist" folder into the Nginx server directory.
COPY --from=builder /app/dist ./

# If you create an nginx.conf for SPA routing, you would copy it here.
# For example: COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose the port Nginx will listen on. Cloud Run will route traffic to this port.
EXPOSE 8080

# The command to start the Nginx server when the container starts.
CMD ["nginx", "-g", "daemon off;"]