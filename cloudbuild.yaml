# ------------------------------------------------------------------
# cloudbuild.yaml DEFINITIVO (Estrategia de Archivo)
# ------------------------------------------------------------------

availableSecrets:
  secretManager:
  - versionName: projects/fitness-464117/secrets/estaesunadieta/versions/latest
    env: 'GEMINI_API_KEY_CONTENT'

steps:
# PASO 0: Escribir el secreto en un archivo llamado .apikey
- name: 'bash'
  id: 'Write Secret to File'
  args:
  - '-c'
  - |
    echo "$$GEMINI_API_KEY_CONTENT" > .apikey

# PASO 1: Construir la imagen de Docker (¡¡SIN --build-arg!!)
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Docker Image'
  args: [
    'build',
    '--tag=gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${SHORT_SHA}',
    '.'
  ]
  waitFor: ['Write Secret to File']

# PASO 2: Limpiar el archivo del secreto por seguridad
- name: 'bash'
  id: 'Clean up secret file'
  args:
  - '-c'
  - |
    rm .apikey
  waitFor: ['Build Docker Image']

# PASO 3: Publicar la imagen
- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Docker Image'
  args: ['push', 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${SHORT_SHA}']
  waitFor: ['Clean up secret file']

# PASO 4: Desplegar en Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Deploy to Cloud Run'
  args: [
    'run', 'deploy', '${_SERVICE_NAME}',
    '--image=gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${SHORT_SHA}',
    '--region=${_REGION}',
    '--platform=managed',
    '--allow-unauthenticated',
    '--port=8080'
  ]
  waitFor: ['Push Docker Image']

images:
- 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${SHORT_SHA}'

substitutions:
  _SERVICE_NAME: 'fitness'
  _REGION: 'us-central1'

options:
  logging: CLOUD_LOGGING_ONLY